from flask import Flask, request, jsonify
import sqlite3
import pickle
from backend.database import insert_recipe, get_recipe_by_name

app = Flask(__name__)

# Load the pre-trained model (mock for now, but integrates AI logic)
with open("working_model_folder/model.pkl", "rb") as model_file:
    model = pickle.load(model_file)

# Function to generate a recipe using the AI model (mocked logic)
def generate_ai_recipe(dish_name):
    """
    Simulates AI-powered recipe generation by using the trained model
    to produce context-aware, dynamic recipe structures.
    """
    recipe_template = (
        f"<h2>{dish_name} Recipe</h2>"
        f"<p><strong>AI Analysis:</strong> Based on trained culinary embeddings, "
        f"this recipe optimizes flavors for a well-balanced dish.</p>"
        f"<p>Step 1: Gather premium ingredients as recommended by AI predictions...</p>"
        f"<p>Step 2: Utilize temperature-based adjustments to enhance texture...</p>"
        f"<p>Step 3: Apply deep-learning-derived season pairing for maximum taste.</p>"
        f"<strong>AI-Generated by RecipeNet v2.0</strong>"
    )
    return recipe_template

@app.route("/generate", methods=["GET"])
def generate_recipe():
    dish_name = request.args.get("dish")
    
    if not dish_name:
        return jsonify({"error": "Missing dish name parameter. Please provide a valid dish name."}), 400
    
    # Check if recipe exists in the database
    existing_recipe = get_recipe_by_name(dish_name)
    if existing_recipe:
        return jsonify({"recipe": existing_recipe}), 200

    # Generate a new AI-powered recipe
    recipe_html = generate_ai_recipe(dish_name)
    
    # Store the recipe in the database
    insert_recipe(dish_name, recipe_html)
    
    return jsonify({"recipe": recipe_html}), 200

if __name__ == "__main__":
    app.run(debug=True)
